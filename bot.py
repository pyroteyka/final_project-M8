
import telebot
from telebot import types
from config import BOT_TOKEN, DAYS_OF_WEEK, HOURS, MINUTES
from logic import add_lesson, get_user_schedule

bot = telebot.TeleBot(BOT_TOKEN)
user_state = {}


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@bot.message_handler(commands=["start"])
def start(message):
    username = message.from_user.first_name or "—Å—Ç—É–¥–µ–Ω—Ç"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìÖ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üß© –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫")

    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç, {username}! üëã\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ. ‚¨áÔ∏è",
        reply_markup=markup,
    )


# --- –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ---
@bot.message_handler(func=lambda msg: msg.text == "üìÖ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def show_schedule(message):
    schedule_text = get_user_schedule(str(message.from_user.id))
    bot.send_message(message.chat.id, schedule_text, parse_mode="Markdown")


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞ ---
@bot.message_handler(func=lambda msg: msg.text == "üß© –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫")
def add_lesson_start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    markup.add(*DAYS_OF_WEEK)
    markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")

    bot.send_message(message.chat.id, "üóì –í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=markup)


# --- –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ (—á–∞—Å–∞) ---
@bot.message_handler(func=lambda msg: msg.text in DAYS_OF_WEEK)
def choose_day(message):
    user_state[message.from_user.id] = {"day": message.text}

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
    markup.add(*HOURS)
    markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")

    bot.send_message(
        message.chat.id,
        f"üóì –î–µ–Ω—å: *{message.text}*\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —á–∞—Å –∑–∞–Ω—è—Ç–∏—è:",
        parse_mode="Markdown",
        reply_markup=markup
    )


# --- –í—ã–±–æ—Ä –º–∏–Ω—É—Ç ---
@bot.message_handler(func=lambda msg: msg.text in HOURS)
def choose_hour(message):
    user_state[message.from_user.id]["hour"] = message.text

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
    markup.add(*MINUTES)
    markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")

    bot.send_message(
        message.chat.id,
        f"‚è∞ –í—ã–±—Ä–∞–Ω —á–∞—Å: *{message.text}:--*\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –º–∏–Ω—É—Ç—ã:",
        parse_mode="Markdown",
        reply_markup=markup
    )


# --- –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ ---
@bot.message_handler(func=lambda msg: msg.text in MINUTES)
def choose_minutes(message):
    user_state[message.from_user.id]["minutes"] = message.text
    bot.send_message(
        message.chat.id,
        f"üïí –í—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–æ: *{user_state[message.from_user.id]['hour']}:{message.text}*\n"
        f"–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:",
        parse_mode="Markdown"
    )


# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ ---
@bot.message_handler(func=lambda msg: msg.text not in DAYS_OF_WEEK + HOURS + MINUTES + ["üìÖ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üß© –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
def save_subject(message):
    user_id = str(message.from_user.id)
    user_data = user_state.get(message.from_user.id, {})

    if not user_data.get("day") or not user_data.get("hour") or not user_data.get("minutes"):
        return

    time = f"{user_data['hour']}:{user_data['minutes']}"
    subject = message.text.strip()

    response = add_lesson(user_id, user_data["day"], time, subject)
    bot.send_message(message.chat.id, response, parse_mode="Markdown")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìÖ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üß© –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫")
    bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨áÔ∏è", reply_markup=markup)

    user_state.pop(message.from_user.id, None)


# --- –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" ---
@bot.message_handler(func=lambda msg: msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def go_back(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìÖ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üß© –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫")
    bot.send_message(message.chat.id, "üîô –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)


# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---
@bot.message_handler(func=lambda msg: True)
def fallback(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá")


if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    bot.infinity_polling()

